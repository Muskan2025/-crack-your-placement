ListNode* findmid(ListNode* head)
    {
        ListNode* slow=head,*fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    ListNode* merge(ListNode* left,ListNode* right)
    {
        if(left==NULL)
        return right;
        if(right==NULL)
        return left;
        ListNode* ans=new ListNode();
        ListNode* temp=ans;
        while(left!=NULL && right!=NULL)
        {
            if(left->val<=right->val)
            {
                temp->next=left;
                temp=left;
                left=left->next;
            }
            else
            {
                temp->next=right;
                temp=right;
                right=right->next;
            }
        }
        while(left!=NULL)
        {
                temp->next=left;
                temp=left;
                left=left->next;
        }
        while(right!=NULL)
        {
               temp->next=right;
                temp=right;
                right=right->next;
        }
        ans=ans->next;
        return ans;
    }
    ListNode* partition(ListNode* head, int x) {
        if(head==NULL || head->next==NULL)
        return head;
        ListNode* mid=findmid(head);
        ListNode* left=head;
        ListNode* right=mid->next;
        mid->next=NULL;
        left=partition(left,x);
        right=partition(right,x);
        ListNode* result=merge(left,right);
        return result;
    }
